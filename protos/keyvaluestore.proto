// Definition of protos and RPC services for keyvaluestore.

syntax = "proto3";

package keyvaluestore;

message EmptyMessage {
}

message ServerConfig {
	string my_addr = 1;
	string my_paxos = 2;
	double fail_rate = 3;
	repeated string replica = 4;
}

// GET request message containing a key
message GetRequest {
  string key = 1;
}

// GET response message containing the value associated with the key
message GetResponse {
  string value = 1;
}

// PUT request message containing a key and a value
message PutRequest {
  string key = 1;
  string value = 2;
}

// DELETE request message containing a key
message DeleteRequest {
  string key = 1;
}

// ELECT Coordinator for Paxos run
message ElectCoordinatorRequest {
	string key = 1;
	string coordinator = 2;
}

// GET Coordinator for Paxos run
message GetCoordinatorResponse {
	string coordinator = 1;
}


// A key-value storage service
service KeyValueStore {
  // Get the corresponding value for a given key
  rpc GetValue (GetRequest) returns (GetResponse) {}

  // Put a (key, value) pair into the store
  rpc PutPair (PutRequest) returns (EmptyMessage) {}

  // Delete the corresponding pair from the store for a given key
  rpc DeletePair (DeleteRequest) returns (EmptyMessage) {}
}

enum OperationType {
  NOT_SET = 0;
  SET = 1;
  DELETE = 2;
  SET_COORDINATOR = 3;
};

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
message PrepareRequest {
  string key = 1;
  int32 round = 2;
  int32 propose_id = 3;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// accepted_id: the highest accepted propose_id (if present).
// value: the value of last accepted proposal to set value for a key.
// do_delete: the decision of last accepted proposal to delete a pair. 
message PromiseResponse {
  int32 round = 1;
  int32 propose_id = 2;
  int32 accepted_id = 3;
  OperationType type = 4;
  string value = 5;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// value: the value proposed to set for a key.
// do_delete: the proposal to delete a pair. 
message ProposeRequest {
  string key = 1;
  int32 round = 2;
  int32 propose_id = 3;
  OperationType type = 4;
  string value = 5;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// value: the value accepted to set for a key.
// do_delete: the decision accepted to delete a pair. 
message AcceptResponse {
  int32 round = 1;
  int32 propose_id = 2;
  OperationType type = 3;
  string value = 4;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// value: the value accepted by quorum to set for a key.
// do_delete: the decision accepted by quorum to delete a pair. 
message InformRequest {
  string key = 1;
  AcceptResponse acceptance = 2;
}

message PaxosLog {
  int32 promised_id = 1;
  int32 accepted_id = 2;
  OperationType accepted_type = 3;
  string accepted_value = 4;
}

message RecoverResponse {
  message PaxosLogs {
    map<int32, PaxosLog> logs = 1;
  }
  map<string, string> kv_map = 1;
  map<string, PaxosLogs> paxos_logs = 2;
}

// RPC service for information exchange between Paxos proposers, acceptors and learners.
service MultiPaxos {
  // Get the corresponding value for a given key
  rpc GetValue (GetRequest) returns (GetResponse) {}
  // Put a (key, value) pair into the store
  rpc PutPair (PutRequest) returns (EmptyMessage) {}
  // Delete the corresponding pair from the store for a given key
  rpc DeletePair (DeleteRequest) returns (EmptyMessage) {}
  // Elect Coordinator.
  rpc ElectCoordinator(ElectCoordinatorRequest) returns (EmptyMessage) {}
  // Get the current coordinator.
  rpc GetCoordinator(EmptyMessage) returns (GetCoordinatorResponse) {}

  // Phase 1. Proposer(Coordinator) -> Acceptors.
  rpc Prepare(PrepareRequest) returns (PromiseResponse) {}
  // Phase 2. Proposer(Coordinator) -> Acceptors.
  rpc Propose(ProposeRequest) returns (AcceptResponse) {}
  // Phase 3. Proposer(Coordinator) -> Learners.
  rpc Inform(InformRequest) returns (EmptyMessage) {}

  // Test if the server is available.
  rpc Ping(EmptyMessage) returns (EmptyMessage) {}
  // After brought up again, a server will catch up with others' logs.
  rpc Recover(EmptyMessage) returns (RecoverResponse) {}
}
