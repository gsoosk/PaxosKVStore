// Definition of protos and RPC services for keyvaluestore.

syntax = "proto3";

package keyvaluestore;

message EmptyMessage {
}

// GET request message containing a key
message GetRequest {
  string key = 1;
}

// GET response message containing the value associated with the key
message GetResponse {
  string value = 1;
}

// PUT request message containing a key and a value
message PutRequest {
  string key = 1;
  string value = 2;
}

// DELETE request message containing a key
message DeleteRequest {
  string key = 1;
}


// A key-value storage service
service KeyValueStore {
  // Get the corresponding value for a given key
  rpc GetValue (GetRequest) returns (GetResponse) {}

  // Put a (key, value) pair into the store
  rpc PutPair (PutRequest) returns (EmptyMessage) {}

  // Delete the corresponding pair from the store for a given key
  rpc DeletePair (DeleteRequest) returns (EmptyMessage) {}
}

enum OperationType{
  NOTSET = 0;
  GET = 1;
  SET = 2;
  DELETE = 3;
};

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
message PrepareRequest {
  string key = 1;
  int32 round = 2;
  int32 propose_id = 3;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// accepted_id: the highest accepted propose_id (if present).
// value: the value of last accepted proposal to set value for a key.
// do_delete: the decision of last accepted proposal to delete a pair. 
message PromiseResponse {
  int32 round = 1;
  int32 propose_id = 2;
  int32 accepted_id = 3;
  OperationType type = 4;
  string value = 5;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// value: the value proposed to set for a key.
// do_delete: the proposal to delete a pair. 
message ProposeRequest {
  string key = 1;
  int32 round = 2;
  int32 propose_id = 3;
  OperationType type = 4;
  string value = 5;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// value: the value accepted to set for a key.
// do_delete: the decision accepted to delete a pair. 
message AcceptResponse {
  int32 round = 1;
  int32 propose_id = 2;
  OperationType type = 3;
  string value = 4;
}

// round: the id of the current Paxos instance.
// propose_id: the id of the proposal in current Paxos run.
// value: the value accepted by quorum to set for a key.
// do_delete: the decision accepted by quorum to delete a pair. 
message InformRequest {
  string key = 1;
  AcceptResponse acceptance = 2;
}

// RPC service for information exchange between Paxos proposers, acceptors and learners.
service Paxos {
  // Phase 1. Proposer(Leader) -> Acceptors.
  rpc Prepare(PrepareRequest) returns (PromiseResponse) {}
  // Phase 2. Proposer(Leader) -> Acceptors.
  rpc Propose(ProposeRequest) returns (AcceptResponse) {}
  // Phase 3. Proposer(Leader) -> Learners.
  rpc Inform(InformRequest) returns (EmptyMessage) {}
}

// A server should broadcast a Greeting message to others every time it's brough up.
message Greeting {
  int32 leader_id = 1;
}

service Recover {
  rpc Greet(Greeting) returns (EmptyMessage) {}
}